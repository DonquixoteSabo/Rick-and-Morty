{"version":3,"sources":["components/Categories/Categories.styles.ts","components/Categories/Categories.tsx","components/Header/Header.styles.ts","components/Header/Header.tsx","pages/Home/Home.styles.ts","components/styledComponents/Status.ts","components/SingleCharacter/SingleCharacter.styles.ts","components/SingleCharacter/SingleCharacter.tsx","components/styledComponents/CharactersWrapper.ts","components/Spinner/Spinner.styles.ts","components/Spinner/Spinner.tsx","components/RandomCharacters/RandomCharacters.tsx","helpers/getRandomNumbers.ts","components/styledComponents/List.ts","components/styledComponents/Title.ts","components/Pagination/Pagination.styles.ts","components/Pagination/Pagination.tsx","components/Episodes/Episodes.tsx","pages/CharacterPage/CharacterPage.styles.ts","pages/CharacterPage/CharacterPage.tsx","components/Characters/Characters.tsx","components/Locations/Locations.tsx","components/Footer/Footer.styles.ts","components/Footer/Footer.tsx","pages/Home/Home.tsx","styles/globalStyle.ts","Root.tsx","index.tsx"],"names":["Wrapper","styled","ul","Typography","li","Link","NavLink","Categories","categories","map","category","to","header","Title","Header","div","Status","status","Card","ImageContainer","Image","img","CardBody","SingleCharacter","name","image","species","location","origin","id","src","className","CharactersWrapper","section","Spinner","getCharacters","nums","a","fetch","response","json","RandomCharacters","randomNumbers","numbers","i","randomNumber","Math","floor","random","push","getRandomNumbers","useQuery","isLoading","data","isSuccess","isError","character","List","Item","Button","button","Pagination","page","setPage","pages","topScroll","useEffect","window","scrollTo","behavior","top","disabled","onClick","getEpisodes","Episodes","useState","maxPages","info","results","article","StyledLink","LeftArrow","Container","getCharacter","CharacterPage","useParams","alt","gender","type","Characters","match","useRouteMatch","path","getLocations","Locations","footer","Footer","href","target","rel","displayCategories","component","link","Home","basename","GlobalStyle","createGlobalStyle","queryClient","QueryClient","Root","QueryClientProvider","client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2e29b8.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Wrapper = styled.ul`\r\n  margin-top: 3em;\r\n  display: flex;\r\n  justify-content: center;\r\n  color: rgb(158, 158, 158);\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Typography = styled.li`\r\n  list-style: none;\r\n  margin: 1em;\r\n  transition: ease 0.1s;\r\n  font-size: 1.4rem;\r\n  font-weight: 500;\r\n\r\n  &:hover,\r\n  .active {\r\n    color: rgb(255, 152, 0);\r\n  }\r\n`;\r\n\r\nexport const Link = styled(NavLink)`\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n","import { Wrapper, Typography, Link } from './Categories.styles';\r\n\r\ninterface Props {\r\n  categories: string[];\r\n}\r\n\r\nfunction Categories({ categories }: Props) {\r\n  return (\r\n    <Wrapper>\r\n      {categories.map((category) => (\r\n        <Typography key={category}>\r\n          <Link to={`/${category}`}>{category}</Link>\r\n        </Typography>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport { Categories };\r\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Wrapper = styled.header`\r\n  background: url('https://i.imgur.com/easQdbn.png') white center;\r\n  background-size: cover;\r\n  padding: 200px 0;\r\n  text-align: center;\r\n\r\n  .active {\r\n    color: rgba(255, 152, 0, 0.6);\r\n  }\r\n`;\r\n\r\nexport const Title = styled(NavLink)`\r\n  font-weight: 900;\r\n  font-size: clamp(2rem, 8vw, 5.5rem);\r\n  text-decoration: none;\r\n  color: black;\r\n  transition: ease 0.1s;\r\n\r\n  &:hover {\r\n    color: rgb(255, 152, 0);\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Wrapper, Title } from './Header.styles';\r\n\r\nfunction Header() {\r\n  return (\r\n    <Wrapper>\r\n      <Title to=\"/\">The Rick and Morty</Title>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport { Header };\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: rgb(36, 40, 47);\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Status as StatusType } from 'types/Status';\r\n\r\ninterface Props {\r\n  status: StatusType;\r\n}\r\n\r\nexport const Status = styled.div<Props>`\r\n  position: relative;\r\n  padding-left: 15px;\r\n  font-size: 0.8rem;\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 0;\r\n    transform: translateY(-50%);\r\n    border-radius: 50%;\r\n    width: 10px;\r\n    height: 10px;\r\n    background: ${({ status }) => {\r\n      if (status === 'Alive') return 'rgb(85, 204, 68)';\r\n      if (status === 'Dead') return 'rgb(214, 61, 46)';\r\n      return 'rgb(158, 158, 158)';\r\n    }};\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Card = styled(Link)`\r\n  width: clamp(400px, 40%, 500px);\r\n  height: 200px;\r\n  display: flex;\r\n  overflow: hidden;\r\n  background: rgb(60, 62, 68);\r\n  border-radius: 0.5rem;\r\n  margin: 0.75rem;\r\n  box-shadow: rgb(0 0 0 / 10%) 0px 4px 6px -1px,\r\n    rgb(0 0 0 / 6%) 0px 2px 4px -1px;\r\n  text-decoration: none;\r\n  transition: 0.5s ease-in-out;\r\n  &:hover {\r\n    box-shadow: #f08d49 2px 2px 2px -1px;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  width: 229px;\r\n  height: 200px;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const CardBody = styled.div`\r\n  padding: 0.75rem;\r\n  color: rgb(255, 255, 255);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  header {\r\n    font-size: 1.5rem;\r\n  }\r\n  .information {\r\n    color: gray;\r\n    font-size: 0.75rem;\r\n  }\r\n`;\r\n","import { Status } from 'components/styledComponents/Status';\r\n\r\nimport { Character } from 'types/Character';\r\nimport {\r\n  Card,\r\n  ImageContainer,\r\n  Image,\r\n  CardBody,\r\n} from './SingleCharacter.styles';\r\n\r\nfunction SingleCharacter({\r\n  name,\r\n  status,\r\n  image,\r\n  species,\r\n  location,\r\n  origin,\r\n  id,\r\n}: Character) {\r\n  return (\r\n    <Card to={`/characters/${id}`}>\r\n      <ImageContainer>\r\n        <Image src={image} />\r\n      </ImageContainer>\r\n      <CardBody>\r\n        <div>\r\n          <header>{name}</header>\r\n          <Status status={status}>\r\n            {status} - {species}\r\n          </Status>\r\n        </div>\r\n        <p>\r\n          <span className=\"information\">\r\n            Last known location: <br />\r\n          </span>\r\n          {location.name}\r\n        </p>\r\n        <p>\r\n          <span className=\"information\">\r\n            Origin: <br />{' '}\r\n          </span>\r\n          {origin.name}\r\n        </p>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { SingleCharacter };\r\n","import styled from 'styled-components';\r\n\r\nexport const CharactersWrapper = styled.section`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 1em 1em;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  .lds-ring {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n\r\n  .lds-ring div {\r\n    box-sizing: border-box;\r\n    display: block;\r\n    position: absolute;\r\n    width: 64px;\r\n    height: 64px;\r\n    margin: 8px;\r\n    border: 8px solid #fff;\r\n    border-radius: 50%;\r\n    animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n    border-color: #fff transparent transparent transparent;\r\n  }\r\n\r\n  .lds-ring div:nth-child(1) {\r\n    animation-delay: -0.45s;\r\n  }\r\n\r\n  .lds-ring div:nth-child(2) {\r\n    animation-delay: -0.3s;\r\n  }\r\n\r\n  .lds-ring div:nth-child(3) {\r\n    animation-delay: -0.15s;\r\n  }\r\n\r\n  @keyframes lds-ring {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Wrapper } from './Spinner.styles';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <Wrapper>\r\n      <div className=\"lds-ring\">\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n      </div>\r\n    </Wrapper>\r\n\r\n  );\r\n};\r\n\r\nexport default Spinner;","import { useQuery } from 'react-query';\r\n\r\nimport { SingleCharacter } from 'components/SingleCharacter/SingleCharacter';\r\nimport { CharactersWrapper } from 'components/styledComponents/CharactersWrapper';\r\n\r\nimport { Character } from 'types/Character';\r\nimport { getRandomNumbers } from 'helpers/getRandomNumbers';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst getCharacters = async (nums: number[]) => {\r\n  const response = await fetch(\r\n    `https://rickandmortyapi.com/api/character/${nums}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\nfunction RandomCharacters() {\r\n  const randomNumbers = getRandomNumbers();\r\n  const { isLoading, data, isSuccess, isError } = useQuery<Character[]>(\r\n    ['randomCharacters'],\r\n    () => getCharacters(randomNumbers)\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isError && <h1>Sorry but we couldn't load data for you</h1>}\r\n      {isLoading && <Spinner />}\r\n      {isSuccess && (\r\n        <CharactersWrapper>\r\n          {data!.map((character: Character) => (\r\n            <SingleCharacter key={character.id} {...character} />\r\n          ))}\r\n        </CharactersWrapper>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport { RandomCharacters };\r\n","const characterAmount = 671;\r\n\r\nexport const getRandomNumbers = (): number[] => {\r\n  const numbers = [];\r\n  for (let i = 0; i < 6; i++) {\r\n    const randomNumber = Math.floor(Math.random() * characterAmount + 1);\r\n    numbers.push(randomNumber);\r\n  }\r\n  return numbers;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  color: white;\r\n  font-size: 1.1rem;\r\n  text-align: center;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin: 0.5em 0;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Title = styled.header`\r\n  color: white;\r\n  font-size: 3rem;\r\n  padding: 1em;\r\n  text-align: center;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 1em;\r\n  border: 1px solid rgb(158, 158, 158);\r\n  color: rgb(158, 158, 158);\r\n  background: transparent;\r\n  outline: none;\r\n  font-size: 1rem;\r\n`;\r\n","import { useEffect } from 'react';\r\n\r\nimport { Wrapper, Button } from './Pagination.styles';\r\n\r\ninterface Props {\r\n  page: number;\r\n  setPage: (page: number) => void;\r\n  pages: number;\r\n  topScroll: number;\r\n}\r\n\r\nfunction Pagination({ page, setPage, pages, topScroll }: Props) {\r\n  const goToPrevPage = () => setPage(page - 1);\r\n  const goToNextPage = () => setPage(page + 1);\r\n  const goToFirstPage = () => setPage(1);\r\n  const goToLastPage = () => setPage(pages);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo({ behavior: 'smooth', top: topScroll });\r\n  }, [page, topScroll]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Button disabled={page === 1} onClick={goToFirstPage}>\r\n        First\r\n      </Button>\r\n      <Button disabled={page === 1} onClick={goToPrevPage}>\r\n        Prev\r\n      </Button>\r\n      <Button disabled>{page}</Button>\r\n      <Button disabled={page === pages} onClick={goToNextPage}>\r\n        Next\r\n      </Button>\r\n      <Button disabled={page === pages} onClick={goToLastPage}>\r\n        Last\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport { Pagination };\r\n","import React, { useState } from 'react';\r\nimport { Query } from 'types/Query';\r\nimport { useQuery } from 'react-query';\r\nimport { List, Item } from 'components/styledComponents/List';\r\nimport { Title } from 'components/styledComponents/Title';\r\nimport { Pagination } from 'components/Pagination/Pagination';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\ninterface Episode {\r\n  id: number;\r\n  name: string;\r\n  air_Date: string;\r\n  episode: string;\r\n}\r\n\r\nconst getEpisodes = async (page: number) => {\r\n  const response = await fetch(\r\n    `https://rickandmortyapi.com/api/episode/?page=${page}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\ninterface EpisodeQuery extends Query {\r\n  results: Episode[];\r\n}\r\n\r\nexport function Episodes() {\r\n  const [page, setPage] = useState(1);\r\n  const { isLoading, isError, isSuccess, data } = useQuery<EpisodeQuery>(\r\n    ['episodes', page],\r\n    () => getEpisodes(page)\r\n  );\r\n  const maxPages = data?.info.pages || 1;\r\n\r\n  return (\r\n    <div>\r\n      <Title>Episode</Title>\r\n      {isLoading && <Spinner />}\r\n      {isError && (\r\n        <h1>\r\n          Sorry, but we couldn't load data for you. Please refresh the page\r\n        </h1>\r\n      )}\r\n      {isSuccess && data && (\r\n        <>\r\n          <List>\r\n            {data.results.map(({ id, name }) => (\r\n              <Item key={id}>{name}</Item>\r\n            ))}\r\n          </List>\r\n          <Pagination\r\n            page={page}\r\n            setPage={setPage}\r\n            pages={maxPages}\r\n            topScroll={400}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Wrapper = styled.article`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 22px;\r\n  color: rgb(255, 255, 255);\r\n\r\n  .img-container {\r\n    max-width: 329px;\r\n    margin-bottom: 1em;\r\n  }\r\n\r\n  .information {\r\n    color: gray;\r\n    font-size: 0.9rem;\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 5%;\r\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\r\n      rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\r\n  }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  position: absolute;\r\n  top: 5%;\r\n  left: 5%;\r\n  padding: 20px;\r\n  color: white;\r\n  text-decoration: none;\r\n  display: grid;\r\n  place-items: center;\r\n`;\r\n\r\nexport const LeftArrow = styled.i`\r\n  position: relative;\r\n  background: #fff;\r\n  height: 3px;\r\n  width: 30px;\r\n  margin: 0 auto;\r\n  cursor: pointer;\r\n\r\n  &:before,\r\n  &:after {\r\n    content: '';\r\n    background: #fff;\r\n    position: absolute;\r\n    height: 3px;\r\n    width: 15px;\r\n  }\r\n\r\n  &:before {\r\n    left: -3px;\r\n    bottom: 4px;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  &:after {\r\n    left: -3px;\r\n    top: 4px;\r\n    transform: rotate(45deg);\r\n  }\r\n`;\r\n\r\nexport const Container = styled.section`\r\n  position: relative;\r\n`;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { Status } from 'components/styledComponents/Status';\r\nimport { Title } from 'components/styledComponents/Title';\r\n\r\nimport { Character } from 'types/Character';\r\nimport {\r\n  Wrapper,\r\n  LeftArrow,\r\n  Container,\r\n  StyledLink,\r\n} from './CharacterPage.styles';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst getCharacter = async (id: string) => {\r\n  const response = await fetch(\r\n    `https://rickandmortyapi.com/api/character/${id}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\ninterface Params {\r\n  id: string;\r\n}\r\n\r\nexport function CharacterPage() {\r\n  const { id } = useParams<Params>();\r\n  const { isLoading, isError, isSuccess, data } = useQuery<Character>(\r\n    ['characters', id],\r\n    () => getCharacter(id)\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Spinner />}\r\n      {isError && <h1>Sorry, but we couldn't load data for you</h1>}\r\n      {isSuccess && data && (\r\n        <Container>\r\n          <StyledLink to=\"/characters\">\r\n            <LeftArrow />\r\n          </StyledLink>\r\n          <Title>{data.name}</Title>\r\n          <Wrapper>\r\n            <div className=\"img-container\">\r\n              <img src={data.image} alt={data.name} />\r\n            </div>\r\n            <div className=\"inner-wrapper\">\r\n              <Status status={data.status}>\r\n                {data.status} - {data.species}\r\n              </Status>\r\n            </div>\r\n            <p>\r\n              <span className=\"information\">Last known location:</span>\r\n              {'  '}\r\n              {data.location.name}\r\n            </p>\r\n            <p>\r\n              <span className=\"information\">Origin: </span>\r\n              {'  '}\r\n              {data.origin.name}\r\n            </p>\r\n            <p>\r\n              <span className=\"information\">Gender: </span>\r\n              {'  '}\r\n              {data.gender}\r\n            </p>\r\n            <p>\r\n              <span className=\"information\">Type: </span>\r\n              {'  '}\r\n              {data.type}\r\n            </p>\r\n          </Wrapper>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\r\n\r\nimport { CharactersWrapper } from 'components/styledComponents/CharactersWrapper';\r\nimport { Pagination } from 'components/Pagination/Pagination';\r\nimport { SingleCharacter } from 'components/SingleCharacter/SingleCharacter';\r\nimport { Title } from 'components/styledComponents/Title';\r\n\r\nimport { CharacterPage } from 'pages/CharacterPage/CharacterPage';\r\nimport { Character } from 'types/Character';\r\nimport { Query } from 'types/Query';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst getCharacters = async (page: number) => {\r\n  const response = await fetch(\r\n    `https://rickandmortyapi.com/api/character/?page=${page}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\ninterface CharacterQuery extends Query {\r\n  results: Character[];\r\n}\r\n\r\nfunction Characters() {\r\n  const [page, setPage] = useState(1);\r\n  let match = useRouteMatch();\r\n\r\n  const { isLoading, isError, isSuccess, data } = useQuery<CharacterQuery>(\r\n    ['characters', page],\r\n    () => getCharacters(page)\r\n  );\r\n  const maxPages = data?.info.pages || 1;\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path={`${match.path}/:id`}>\r\n          <CharacterPage />\r\n        </Route>\r\n        <Route path={match.path}>\r\n          {isLoading && <Spinner />}\r\n          {isError && <h1>Sorry, but we couldn't load data for you</h1>}\r\n          {isSuccess && data && (\r\n            <>\r\n              <Title>Characters</Title>\r\n              <CharactersWrapper>\r\n                {data.results.map((character) => (\r\n                  <SingleCharacter key={character.id} {...character} />\r\n                ))}\r\n              </CharactersWrapper>\r\n              <Pagination\r\n                page={page}\r\n                setPage={setPage}\r\n                pages={maxPages}\r\n                topScroll={500}\r\n              />\r\n            </>\r\n          )}\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Characters };\r\n","import React, { useState } from 'react';\r\nimport { Query } from 'types/Query';\r\nimport { useQuery } from 'react-query';\r\nimport { List, Item } from 'components/styledComponents/List';\r\nimport { Title } from 'components/styledComponents/Title';\r\nimport { Pagination } from 'components/Pagination/Pagination';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst getLocations = async (page: number) => {\r\n  const response = await fetch(\r\n    `https://rickandmortyapi.com/api/location/?page=${page}`\r\n  );\r\n  return response.json();\r\n};\r\n\r\ninterface Location {\r\n  id: number;\r\n  name: string;\r\n  type: string;\r\n  dimenstion: string;\r\n  residentals: string[];\r\n}\r\n\r\ninterface LocationQuery extends Query {\r\n  results: Location[];\r\n}\r\n\r\nexport function Locations() {\r\n  const [page, setPage] = useState(1);\r\n  const { isLoading, isError, isSuccess, data } = useQuery<LocationQuery>(\r\n    ['locations', page],\r\n    () => getLocations(page)\r\n  );\r\n  const maxPages = data?.info.pages || 1;\r\n\r\n  return (\r\n    <div>\r\n      <Title>Locations</Title>\r\n      {isLoading && <Spinner />}\r\n      {isError && (\r\n        <h1>\r\n          Sorry, but we couldn't load data for you. Please refresh the page\r\n        </h1>\r\n      )}\r\n      {isSuccess && data && (\r\n        <>\r\n          <List>\r\n            {data.results.map(({ id, name }) => (\r\n              <Item key={id}>{name}</Item>\r\n            ))}\r\n          </List>\r\n          <Pagination\r\n            page={page}\r\n            setPage={setPage}\r\n            pages={maxPages}\r\n            topScroll={400}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.footer`\r\n  color: rgb(158, 158, 158);\r\n  background: rgb(32, 35, 41);\r\n  text-align: center;\r\n  padding: 3em 0;\r\n\r\n  a {\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    text-decoration: underline #f08d49;\r\n    color: white;\r\n    font-weight: 500;\r\n    transition: 0.3s ease-in-out;\r\n    padding: 0.5em 0;\r\n\r\n    &:hover {\r\n      color: #f08d49;\r\n      text-decoration: none;\r\n    }\r\n  }\r\n\r\n  .inspiration {\r\n    margin-top: 3em;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Wrapper } from './Footer.styles';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Wrapper>\r\n      <header>\r\n        {'<>'} by{' '}\r\n        <a href=\"https://github.com/Kamil-Budzik\">Kamil Budzik 2022</a>\r\n      </header>\r\n      <a href=\"https://github.com/Kamil-Budzik/Rick-and-Morty\">\r\n        Code on github\r\n      </a>\r\n      <br />\r\n      <a\r\n        target=\"_blank\"\r\n        className=\"inspiration\"\r\n        href=\"https://rickandmortyapi.com/\"\r\n        rel=\"noreferrer\"\r\n      >\r\n        Inspiration and API\r\n      </a>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { Categories } from 'components/Categories/Categories';\r\nimport { Header } from 'components/Header/Header';\r\nimport { Wrapper } from './Home.styles';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport { RandomCharacters } from 'components/RandomCharacters/RandomCharacters';\r\nimport { Episodes } from 'components/Episodes/Episodes';\r\nimport { Characters } from 'components/Characters/Characters';\r\nimport { Locations } from 'components/Locations/Locations';\r\nimport Footer from '../../components/Footer/Footer';\r\n\r\nconst displayCategories = [\r\n  {\r\n    component: <Characters />,\r\n    link: 'characters',\r\n  },\r\n  {\r\n    component: <Locations />,\r\n    link: 'locations',\r\n  },\r\n  {\r\n    component: <Episodes />,\r\n    link: 'episodes',\r\n  },\r\n];\r\n\r\nfunction Home() {\r\n  return (\r\n    <Router basename=\"/Rick-and-Morty\">\r\n      <Wrapper>\r\n        <Header />\r\n        <Switch>\r\n          {displayCategories.map(({ component, link }) => (\r\n            <Route key={link} path={`/${link}`}>\r\n              {component}\r\n            </Route>\r\n          ))}\r\n          <Route path=\"/\">\r\n            <RandomCharacters />\r\n          </Route>\r\n        </Switch>\r\n        <Categories\r\n          categories={displayCategories.map((category) => category.link)}\r\n        />\r\n        <Footer />\r\n      </Wrapper>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport { Home };\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  *, *::before, *::after {\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  html, body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    font-size: 12px;\r\n    @media (min-width: 756px) {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GlobalStyle };\r\n","import { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\nimport { Home } from 'pages/Home/Home';\r\n\r\nimport { GlobalStyle } from 'styles/globalStyle';\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport function Root() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <GlobalStyle />\r\n      <Home />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Root } from 'Root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}